{"version":3,"file":"static/js/254.05afd391.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","hooks/useContacts.js","utils/schemas.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx","pages/Register/Register.styled.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 40px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  margin-bottom: 8px;\n  font-size: 20px;\n  font-weight: 500;\n  text-align: center;\n`;\n\nexport const Input = styled(Field)`\n  font-size: 16px;\n  padding: 4px;\n  border: 1px solid Plum;\n  border-radius: 4px;\n  color: DarkSlateBlue;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  font-size: 12px;\n  font-weight: 400;\n  color: Red;\n`;\n\nexport const Button = styled.button`\n  color: inherit;\n  padding: 8px;\n  font-size: 16px;\n  border: 1px solid DarkSlateBlue;\n  border-radius: 4px;\n  background-color: Plum;\n  cursor: pointer;\n\n  &:hover,\n  &:focus,\n  &:active {\n    background-color: DarkSlateBlue;\n    color: White;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().trim().includes(normalizedFilter)\n    );\n  }\n);\n","import { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectFilterValue,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilterValue);\n\n  return {\n    contacts,\n    isLoading,\n    error,\n    filter,\n  };\n};\n","import * as yup from 'yup';\n\nexport let contactSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(3, 'Name is too short!')\n    .matches(\n      /^[A-Za-zА-Яа-яёЁ]+(?:[-'\\s][A-Za-zА-Яа-яёЁ]+)*$/,\n      'Name must not contain digits'\n    )\n    .required('Name is required!'),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Please enter a valid number!'\n    )\n    .required('Number is required!'),\n});\n\nexport let loginSchema = yup.object().shape({\n  email: yup\n    .string()\n    .matches(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/, 'Please enter a valid email')\n    .required('Email is required!'),\n  password: yup\n    .string()\n    .min(6, 'Password must be at least 6 characters!')\n    .matches(\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/,\n      'Password must include at least one capital letter and one digit'\n    )\n    .required('Password is required!'),\n});\n\nexport let registrationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(3, 'Name is too short!')\n    .matches(\n      /^[A-Za-zА-Яа-яёЁ]+(?:[-'\\s][A-Za-zА-Яа-яёЁ]+)*$/,\n      'Name must not contain digits'\n    )\n    .required('Name is required!'),\n  email: yup\n    .string()\n    .matches(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/, 'Please enter a valid email')\n    .required('Email is required!'),\n  password: yup\n    .string()\n    .min(6, 'Password must be at least 6 characters!')\n    .matches(\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/,\n      'Password must include at least one capital letter and one digit'\n    )\n    .required('Password is required!'),\n});\n","import { Formik } from 'formik';\nimport { StyledForm, Label, Input, Error, Button } from './ContactForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { toast } from 'react-hot-toast';\nimport { useContacts } from 'hooks/useContacts';\nimport { contactSchema } from 'utils/schemas';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const { contacts } = useContacts();\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (contacts.find(contact => contact.name === values.name)) {\n      toast.error(`Sorry, ${values.name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact(values));\n\n    resetForm();\n\n    toast.success('Contact successfully added!');\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={contactSchema}\n    >\n      <StyledForm>\n        <Label>\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <Error component=\"div\" name=\"name\" />\n        </Label>\n        <Label>\n          Number\n          <Input type=\"tel\" name=\"number\" />\n          <Error component=\"div\" name=\"number\" />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Text = styled.p`\n  font-size: 16px;\n`;\n\nexport const Button = styled.button`\n  color: inherit;\n  padding: 4px;\n  font-size: 12px;\n  border: 1px solid DarkSlateBlue;\n  border-radius: 4px;\n  background-color: Plum;\n  cursor: pointer;\n\n  &:hover,\n  &:focus,\n  &:active {\n    background-color: DarkSlateBlue;\n    color: White;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { toast } from 'react-hot-toast';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Text, Button } from './Contact.styled';\n\nexport const Contact = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n    toast.success('Contact was deleted!');\n  };\n\n  return (\n    <>\n      <Text>\n        {name}: {number}\n      </Text>\n      <Button type=\"button\" onClick={() => handleDelete(id)}>\n        Delete\n      </Button>\n    </>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 8px;\n  flex-direction: column;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 8px;\n`;\n\nexport const ListTitle = styled.h3`\n  font-size: 18px;\n  line-height: 1.4;\n  font-weight: 500;\n  margin-bottom: 8px;\n`;\n","import { Contact } from 'components/Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilteredContacts,\n} from 'redux/contacts/selectors';\nimport { Text } from 'components/Contact/Contact.styled';\nimport { Item, List, ListTitle } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <>\n      <ListTitle>Your Contacts</ListTitle>\n      {contacts.length ? (\n        filteredContacts.length ? (\n          <List>\n            {filteredContacts.map(contact => (\n              <Item key={contact.id}>\n                <Contact contact={contact} />\n              </Item>\n            ))}\n          </List>\n        ) : (\n          <Text>No matches found!</Text>\n        )\n      ) : (\n        <Text>No contacts yet!</Text>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n  margin-bottom: 20px;\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const Input = styled.input`\n  font-size: 16px;\n  padding: 4px;\n  border: 1px solid Plum;\n  border-radius: 4px;\n  color: DarkSlateBlue;\n`;\n","import { useContacts } from 'hooks/useContacts';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { Label, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const { filter } = useContacts();\n  const dispatch = useDispatch();\n\n  const onFilterInput = evt => {\n    dispatch(setFilter(evt.target.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name:\n      <Input type=\"text\" value={filter} onChange={onFilterInput} />\n    </Label>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { Logo, Text } from 'pages/Register/Register.styled';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { ROUTES } from 'utils/routes';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Text>\n        Manage your contacts\n        <Logo to={ROUTES.HOME}>Phonebook</Logo>\n      </Text>\n      <ContactForm />\n      <Filter />\n      {isLoading && !error && <Loader />}\n      {!isLoading && <ContactList />}\n    </>\n  );\n};\n\nexport default Contacts;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Text = styled.p`\n  font-size: 18px;\n  line-height: 1.4;\n  font-weight: 500;\n  padding: 16px;\n`;\n\nexport const Logo = styled(Link)`\n  display: block;\n  font-size: 40px;\n  font-style: italic;\n  line-height: 1.6;\n  color: Plum;\n  text-decoration: none;\n  &:hover,\n  &:focus {\n    color: DarkSlateBlue;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  position: relative;\n  margin-bottom: 16px;\n  max-width: 205px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  text-align: left;\n  flex-direction: column;\n  gap: 4px;\n  font-size: 16px;\n  line-height: 1.2;\n`;\n"],"names":["StyledForm","styled","Form","Label","Input","Field","Error","ErrorMessage","Button","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilterValue","filter","selectFilteredContacts","createSelector","normalizedFilter","toLowerCase","trim","contact","name","includes","useContacts","useSelector","contactSchema","yup","shape","min","matches","required","number","email","password","initialValues","ContactForm","dispatch","useDispatch","onSubmit","values","resetForm","find","toast","addContact","validationSchema","type","component","Text","Contact","id","onClick","deleteContact","handleDelete","List","Item","ListTitle","ContactList","filteredContacts","length","map","Filter","value","onChange","evt","setFilter","target","useEffect","fetchContacts","to","ROUTES","Loader","Logo","Link","Wrapper"],"sourceRoot":""}